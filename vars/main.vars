#!/bin/bash
# Location /etc/repomanager/vars/main

## /!\ Ne pas modifier ##
# Variables utilisées par repomanager

DATE_JMA=$(date +%d-%m-%Y)				                    # Date du jour au format JJ-MM-AAAA
DATE_AMJ=$(date +%Y-%m-%d)						            # Date du jour au format AAAA-MM-JJ
HEURE_HM=$(date +%H-%M)							            # Heure au format HH-MM
HEURE_HhM=$(date +%Hh%M)									# Heure au format HHhMM
HEURE_HMS=$(date +%H-%M-%S)									# Heure au format HH-MM-SS
HEURE_HhMmSs=$(date +%Hh%Mm%Ss)								# Heure au format HHhMMSSs
REPOMANAGER="${BASE_DIR}/repomanager"
ETC_DIR="/etc/repomanager"
CONF="${ETC_DIR}/repomanager.conf"
PLAN_CONF="${ETC_DIR}/planifications.conf"
ENV_CONF="${ETC_DIR}/envs.conf"
GROUPS_CONF="${ETC_DIR}/groups.conf"
HOSTS_CONF="${ETC_DIR}/hosts.conf"							# Emplacement du fichier d'informations des URLs hôtes de repos (Debian uniquement)
REPOS_LIST="${BASE_DIR}/repos.list"				            # Emplacement du fichier d'informations des repos
REPOS_ARCHIVE_LIST="${BASE_DIR}/repos-archive.list"			# Emplacement du fichier d'informations des URLs hôtes de repos (Debian uniquement)
LOGS_DIR="${BASE_DIR}/logs"
MAIN_LOGS_DIR="${LOGS_DIR}/main"
LOGNAME="repomanager_${DATE_AMJ}_${HEURE_HMS}.log"			# Nom que portera le fichier de log
LOG="${MAIN_LOGS_DIR}/${LOGNAME}"							# Fichier de log principal
LOG_PARSED="/tmp/${LOGNAME}"								# Fichier de log principal sans les caractères ANSI, destiné à être envoyé par mail
KEEP_LOG="yes"
FUNCTIONS="${BASE_DIR}/functions"
VERSION=$(cat ${BASE_DIR}/version | grep '^VERSION=' | awk -F 'VERSION=' '{print $2}' | sed 's/"//g')
if [ -f "${BASE_DIR}/cron/github.version" ];then
	GITHUB_VERSION=$(cat ${BASE_DIR}/cron/github.version | grep '^GITHUB_VERSION=' | awk -F 'VERSION=' '{print $2}' | sed 's/"//g')
else
	GITHUB_VERSION=""
fi

LOCK="${BASE_DIR}/repomanager.lock"
REPOMANAGER_YUM_DIR="/etc/yum.repos.d/repomanager"

# Profils et fichiers de conf repo :
PROFILES_MAIN_DIR="${REPOS_DIR}/profiles"
REPOS_PROFILES_CONF_DIR="${PROFILES_MAIN_DIR}/_configurations"

# GPG
# Répertoire principal de gpg pour repomanager :
GPGHOME="${BASE_DIR}/.gnupg"
PASSPHRASE_FILE="${GPGHOME}/passphrase"						# Fichier contenant la passphrase
GPG_KEYID=""
GPG_CHECK="yes"
GPG_SIGN_PACKAGES=""
RPM_GPG_DIR="/etc/pki/rpm-gpg/repomanager"

# Update
UPDATE_AUTO=""
UPDATE_BACKUP=""
UPDATE_BACKUP_DIR=""
UPDATE_AVAILABLE="0"

EMAIL_DEST=""												# destinataire pour les alertes mails (défini dans le fichier de conf)
CONFIRM=""
REPO_NAME=""
REPO_NEW_NAME=""
REPO_REALNAME=""
REPO_HOST=""
REPO_RACINE=""
REPO_DIST=""
REPO_SECTION=""
REPO_ENV=""
REPO_NEW_ENV=""
DEFAULT_ENV=""
REPO_DATE=""
REPO_DESCRIPTION=""
NO_GPG_CHECK="0"
SUPPR_AUTO="0"
OS_FAMILY=""
OS_NAME=""
OS_VERSION=""
WWW_ENABLED=""
WWW_USER=""
WWW_HOSTNAME=""
WWW_REPOS_DIR_URL=""
MANAGE_PROFILES=""
REPO_CONF_FILES_PREFIX=""
AUTOMATISATION_ENABLED=""
ALLOW_AUTOUPDATE_REPOS=""
ALLOW_AUTOUPDATE_REPOS_ENV=""
ALLOW_AUTODELETE_ARCHIVED_REPOS=""
RETENTION=""
TTY="1"
CHECK_DEP=""
RESULT=""
DEBUG_MODE="disabled"

# Planifications
PLAN_LOGS_DIR="${LOGS_DIR}/plans"
PLAN_LOG="${PLAN_LOGS_DIR}/plans.log"
PLAN_EXEC="0"
PLAN_ERROR="0"

# Cron
CRON_LOGS_DIR="${LOGS_DIR}/cron"
CRON_LOG="${CRON_LOGS_DIR}/cronjob-daily.log"


# Messages d'erreur
# Global
MSG_MAIN=""
MSG_MAIN_ERROR=""		# Messages d'erreurs global				                	
# Check conf
CHECK_CONF_ERROR="0"
MSG_CHECK_CONF_ERROR=""	# Messages d'erreurs de la vérification de conf
# Planifications
MSG_PLAN_ERROR=""
MSG_REMINDER=""
# Nettoyage auto
MSG_DELETE_ARCHIVED_REPOS_AUTO=""	# Messages d'erreurs de suppression des anciens repos


# Affichage dans le terminal
# Variables de couleurs :
BLANC=$(tput setaf 7)
GRIS=$(tput setaf 8)
VERT=$(tput setaf 2)
ROUGE=$(tput setaf 1)
JAUNE=$(tput setaf 3)
CYAN=$(tput setaf 6)
RESET=$(tput sgr0)
# en version bold :
BLANCB=$(tput bold;tput setaf 7)
GRISB=$(tput bold;tput setaf 8)
VERTB=$(tput bold;tput setaf 2)
ROUGEB=$(tput bold;tput setaf 1)
JAUNEB=$(tput bold;tput setaf 3)
CYANB=$(tput bold;tput setaf 6)

tabs 30									                				# Taille des tabulations
SEP(){ printf '%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' = ; }		# Séparateur ligne plein écran


# Détection du système
# Le fichier /etc/os-release est présent sur les OS récents et permet de récupérer toutes les infos nécéssaires
if [ -f "/etc/os-release" ];then
	OS_FAMILY=$(grep "^ID_LIKE=" /etc/os-release | cut -d'=' -f2 | sed 's/"//g')
	
	if [ -z "$OS_FAMILY" ];then
		echo -e "[${ROUGE} ERREUR ${RESET}] Famille d'OS non reconnue"
		exit
	fi

	# Si OS_FAMILY contient l'un des termes suivants alors c'est la famille redhat
	if echo "$OS_FAMILY" | egrep -q -i 'rhel|centos|fedora';then
		OS_FAMILY="Redhat"
	fi

	# Si OS_FAMILY contient l'un des termes suivants alors c'est la famille debian
	if echo "$OS_FAMILY" | egrep -q -i 'debian|ubuntu|kubuntu|xubuntu|armbian|mint';then
		OS_FAMILY="Debian"
	fi

	# Enfin si OS_FAMILY n'est ni égale à Redhat ni à Debian alors on est sur un OS non pris en charge
	if ! echo "$OS_FAMILY" | egrep -q -i 'Redhat|Debian';then
		echo -e "[${ROUGE} ERREUR ${RESET}] Famille d'OS non prise en charge ($OS_FAMILY)"
		exit
	fi

	# Toujours à partir de /etc/os-release, on récupère le nom de l'OS et sa version
	OS_NAME=$(grep "^ID=" /etc/os-release | cut -d'=' -f2 | sed 's/"//g')
	if [ -z "$OS_NAME" ];then
		echo -e "[${ROUGE} ERREUR ${RESET}] Nom d'OS inconnu"
		exit
	fi

	OS_VERSION=$(grep "^VERSION_ID=" /etc/os-release | cut -d'=' -f2 | sed 's/"//g')
	if [ -z "$OS_VERSION" ];then
		echo -e "[${ROUGE} ERREUR ${RESET}] Version d'OS inconnue"
		exit
	fi
fi

# Cas où /etc/os-release n'existe pas
if [ ! -f "/etc/os-release" ];then
	# Si apt est présent, on est sur un os de la famille Debian
	if [ -f "/usr/bin/apt" ];then
		OS_FAMILY="Debian"
	fi
	# Si yum ou dnf est présent, on est sur un os de la famille Redhat
	if [ -f "/usr/bin/yum" ] || [ -f "/usr/bin/dnf" ];then
		OS_FAMILY="Redhat"
	fi

	# A ce stade si OS_FAMILY est vide alors on est sur un OS non pris en charge
	if [ -z "$OS_FAMILY" ];then
		echo -e "[${ROUGE} ERREUR ${RESET}] Famille d'OS inconnue, système non pris en charge"
		exit
	fi

	# /usr/bin/lsb_release est un programme uniquement présent sur les OS de la famille Debian
	if [ -f "/usr/bin/lsb_release" ];then
		OS_NAME=$(lsb_release -a 2> /dev/null | grep 'Distributor ID:' | awk '{print $NF}')
		OS_VERSION=$(lsb_release -a 2> /dev/null | grep 'Release:' | awk '{print $NF}')
	fi

	# Dernier recours pour les OS de la famille Redhat
	# Si /etc/centos-release existe, c'est un centos
	if [ -f "/etc/centos-release" ];then
		OS_NAME="CentOS"
		OS_VERSION=$(rpm --eval '%{centos_ver}')
	fi
	# Si /etc/fedora-release existe, c'est un fedora
	if [ -f "/etc/fedora-release" ];then
		OS_NAME="Fedora"
		OS_VERSION=$(cat /etc/os-release | grep "VERSION_ID" | cut -d'=' -f2 | sed 's/"//g')
	fi

	# On quitte le programme si on n'a rien trouvé à ce stade
	if [ -z "$OS_NAME" ];then
		echo -e "[${ROUGE} ERREUR ${RESET}] Nom d'OS inconnu"
		exit
	fi 
	if [ -z "$OS_VERSION" ];then
		echo -e "[${ROUGE} ERREUR ${RESET}] Version d'OS inconnue"
		exit
	fi
fi