#!/bin/bash

# Actions regulières exécutées par cron ($WWW_USER)
set -u

PERMS_ERROR=0
CHECK_VERSION_ERROR=0
GENERATE_REPO_CONF_FILES=0

# Création du répertoire de logs si n'existe pas
if [ ! -d "$CRON_LOGS_DIR" ];then mkdir -p "$CRON_LOGS_DIR";fi

# Vidage du fichier de log
if [ -f "$CRON_LOG" ];then echo -n> "$CRON_LOG";fi

# Vérification d'une nouvelle version disponible sur github
# Récupère le numéro de version qui est publié sur github dans le fichier 'version'
GITHUB_VERSION=$(curl -s -H 'Cache-Control: no-cache' "https://raw.githubusercontent.com/lbr38/repomanager/${UPDATE_BRANCH}/version" | grep 'VERSION=' | cut -d'=' -f2 | sed 's/"//g')
if [ -z "$GITHUB_VERSION" ];then
    (( CHECK_VERSION_ERROR++ ))
else
    echo "# Version disponible sur github" > "${BASE_DIR}/cron/github.version"
    echo "GITHUB_VERSION=\"$GITHUB_VERSION\"" >> "${BASE_DIR}/cron/github.version"
fi

# Regénération de tous les fichiers de conf repo (.list ou .repo) utilisés par les profils, au cas où certains seraient manquants
if [ "$MANAGE_PROFILES" == "yes" ] && [ -d "$REPOS_PROFILES_CONF_DIR" ];then
    # On récupère toute la liste des repos actifs pour regénérer leur fichier de conf
    if [ "$OS_FAMILY" == "Redhat" ];then
        while IFS=, read REPO_NAME REPO_REALNAME REPO_ENV REPO_DATE REPO_DESCRIPTION;do
            REPO_NAME=$(echo "$REPO_NAME" | cut -d'=' -f2 | sed 's/"//g')

            # On fait appel à la fonction generateConf directement
            generateConf --repo-name $REPO_NAME
            if [ $? -ne "0" ];then 
                (( GENERATE_REPO_CONF_FILES++ ))
            fi
        done < $REPOS_LIST
    fi

    if [ "$OS_FAMILY" == "Debian" ];then
        while IFS=, read REPO_NAME REPO_HOSTNAME REPO_DIST REPO_SECTION REPO_ENV REPO_DATE REPO_DESCRIPTION;do
            REPO_NAME=$(echo "$REPO_NAME" | cut -d'=' -f2 | sed 's/"//g')
            REPO_DIST=$(echo "$REPO_DIST" | cut -d'=' -f2 | sed 's/"//g')
            REPO_SECTION=$(echo "$REPO_SECTION" | cut -d'=' -f2 | sed 's/"//g')

            # On fait appel à la fonction generateConf directement
            generateConf --repo-name $REPO_NAME --repo-dist $REPO_DIST --repo-section $REPO_SECTION
            if [ $? -ne "0" ];then 
                (( GENERATE_REPO_CONF_FILES++ ))
            fi
        done < $REPOS_LIST
    fi
fi

# Réapplique les bons droits sur le répertoire parent des repos
# Laisser cette tâche en dernier car c'est la plus longue
cd "$REPOS_DIR"

find . -type d -exec chmod 0770 {} \;
if [ $? -ne "0" ];then 
    (( PERMS_ERROR++ ))
fi

find . -type f -exec chmod 0660 {} \;
if [ $? -ne "0" ];then 
    (( PERMS_ERROR++ ))
fi

chown -R ${WWW_USER}:repomanager "$REPOS_DIR"
if [ $? -ne "0" ];then 
    (( PERMS_ERROR++ ))
fi

# Vérification des erreurs et ajout dans le fichier de log si c'est le cas
if [ "$CHECK_VERSION_ERROR" -gt "0" ];then
    echo "Status=\"KO\"" >> "$CRON_LOG"
    echo "Problème lors de la vérification d'une nouvelle version" >> "$CRON_LOG"
fi

if [ "$GENERATE_REPO_CONF_FILES" -gt "0" ];then
    echo "Status=\"KO\"" >> "$CRON_LOG"
    echo "Problème lors de regénération des fichiers de conf repo des profils" >> "$CRON_LOG"
fi

if [ "$PERMS_ERROR" -gt "0" ];then
    echo "Status=\"KO\"" >> "$CRON_LOG"
    echo "Problème lors de l'application des permissions" >> "$CRON_LOG"
fi

# Si aucune erreur n'a eu lieu, on affiche un status OK
if [ "$CHECK_VERSION_ERROR" -eq "0" ] && [ "$GENERATE_REPO_CONF_FILES" -eq "0" ] && [ "$PERMS_ERROR" -eq "0" ];then
    echo "Status=\"OK\"" >> "$CRON_LOG"
fi