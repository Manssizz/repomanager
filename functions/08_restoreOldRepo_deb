#!/bin/bash

# La fonction a besoin de 5 paramètres pour fonctionner :
# Le nom du repo
# Le nom de la distribution
# Le nom de la section
# La date de la section
# La description de la section (peut être vide)

# Affichage des arguments passés si le mode debug est activé :
if [ "$DEBUG_MODE" == "enabled" ];then echo "Arguments : $@";fi

while [ $# -ge 1 ];do case "$1" in
	--repo-name)
		REPO_NAME="$2"
		shift
	;;
	--repo-dist)
		REPO_DIST="$2"
		shift
	;;
	--repo-section)
		REPO_SECTION="$2"
		shift
	;;
	--repo-date)
		REPO_DATE="$2"
		shift
	;;
    --repo-description)
    	# on shift un coup pour récupérer tous les derniers arguments $* (la description pouvant contenir des espaces, chaque espace est un nouvel argument, c'est pour ça qu'on récupère tout)
		shift
		REPO_DESCRIPTION="$*"
    ;;
	*)
	esac
	shift
done
if [ "$REPO_DESCRIPTION" == "nodescription" ];then REPO_DESCRIPTION="";fi # Si la description est égale à 'nodescription' alors elle doit être laissée vide
# On récupère le Host du repo archivé qui va être restauré
REPO_HOST=$(egrep "^Name=\"${REPO_NAME}\",Host=\".*\",Dist=\"${REPO_DIST}\",Section=\"${REPO_SECTION}\",Date=\"${REPO_DATE}\"" "${REPOS_ARCHIVE_LIST}" | awk -F ',' '{print $2}' | cut -d'=' -f2 | sed 's/"//g')


# On vérifie que la section renseignée est bien présente dans le fichier repos-archive.list, si oui alors on peut commencer l'opération
if ! egrep -q "^Name=\"${REPO_NAME}\",Host=\".*\",Dist=\"${REPO_DIST}\",Section=\"${REPO_SECTION}\",Date=\"${REPO_DATE}\"" ${REPOS_ARCHIVE_LIST};then
	echo -e "\nErreur de syntaxe ou il n'existe aucune section archivée ${CYAN}${REPO_SECTION}${RESET} du repo ${CYAN}${REPO_NAME}${RESET} (distribution : ${REPO_DIST}) sur ce serveur..."
    clean_exit
fi

# On récupère des informations de la section du même nom actuellement en place et qui va être remplacée
REPO_ACTUAL_DATE=$(egrep "^Name=\"${REPO_NAME}\",Host=\".*\",Dist=\"${REPO_DIST}\",Section=\"${REPO_SECTION}\",Env=\"${DEFAULT_ENV}\"" "${REPOS_LIST}" | awk -F ',' '{print $6}' | cut -d'=' -f2 | sed 's/"//g')

####

echo -e "\nDébut de l'opération"
sleep 1

####

cd ${REPOS_DIR}/${REPO_NAME}/${REPO_DIST}/ &&
# Suppression du lien symbolique si une section existe sur $DEFAULT_ENV (n'affichera pas d'erreur si il n'y en a pas)
unlink ${REPO_SECTION}_${DEFAULT_ENV} &&

####

echo -ne "Remise en place de l'ancien snapshot :\t"
mv archived_${REPO_DATE}_${REPO_SECTION} ${REPO_DATE}_${REPO_SECTION} &&
echo -e "[$VERT OK $RESET]"

####

echo -ne "Création du lien symbolique :\t"
ln -s ${REPO_DATE}_${REPO_SECTION}/ ${REPO_SECTION}_${DEFAULT_ENV} &&
echo -e "[$VERT OK $RESET]"

####

# Archivage de la version de la section (remplacée par la section restaurée) si elle n'est pas utilisée par d'autres envs
# On vérifie que la version de la section n'est pas utilisée par d'autres environnements avant de l'archiver
# Si la version qui vient d'être remplacée est utilisée par d'autres envs, alors on ne l'archive pas : 
if [[ ! -z $(egrep "^Name=\"${REPO_NAME}\",Host=\".*\",Dist=\"${REPO_DIST}\",Section=\"${REPO_SECTION}\",Env=\".*\",Date=\"${REPO_ACTUAL_DATE}\"" ${REPOS_LIST} | grep -v "^${DEFAULT_ENV}") ]];then
	echo -e "\nLe miroir en date du ${REPO_ACTUAL_DATE} de la section ${CYAN}${REPO_SECTION}${RESET} est toujours utilisé par d'autres environnements donc on ne l'archive pas"
	echo -ne "Mise à jour des informations dans repos.list :\t"
	sed -i /^Name=\"${REPO_NAME}\",Host=\".*\",Dist=\"${REPO_DIST//\//\\/}\",Section=\"${REPO_SECTION}\",Env=\"${DEFAULT_ENV}\",Date=\"${REPO_ACTUAL_DATE}\"/d ${REPOS_LIST} && # on retire la version qui vient d'être remplacée sur ${DEFAULT_ENV}
	echo "Name=\"${REPO_NAME}\",Host=\"${REPO_HOST}\",Dist=\"${REPO_DIST}\",Section=\"${REPO_SECTION}\",Env=\"${DEFAULT_ENV}\",Date=\"${REPO_DATE}\",Description=\"${REPO_DESCRIPTION}\"" >> ${REPOS_LIST} && # Puis on rajoute la nouvelle (ya que la date qui change au final)
	echo -e "[$VERT OK $RESET]"
	echo -ne "Mise à jour des informations dans repos-archive.list :\t"
	sed -i /^Name=\"${REPO_NAME}\",Host=\"${REPO_HOST}\",Dist=\"${REPO_DIST//\//\\/}\",Section=\"${REPO_SECTION}\",Date=\"${REPO_DATE}\"/d ${REPOS_ARCHIVE_LIST} &&	# Suppression des infos de la section archivée dans repos-archive.list puisqu'on vient de la restaurer
	echo -e "[$VERT OK $RESET]"
# Si la section qu'on vient de restaurer n'a remplacé aucune section (comprendre il n'y avait aucune section en cours sur DEFAULT_ENV), alors on mets à jour les infos dans repos.list. Pas d'archivage de quoi que ce soit.
elif [[ -z $(egrep "^Name=\"${REPO_NAME}\",Host=\".*\",Dist=\"${REPO_DIST}\",Section=\"${REPO_SECTION}\",Env=\"${DEFAULT_ENV}\",Date=\"${REPO_DATE}\"" ${REPOS_LIST}) ]];then
	echo -ne "Mise à jour des informations dans repos.list :\t" &&
	echo "Name=\"${REPO_NAME}\",Host=\"${REPO_HOST}\",Dist=\"${REPO_DIST}\",Section=\"${REPO_SECTION}\",Env=\"${DEFAULT_ENV}\",Date=\"${REPO_DATE}\",Description=\"${REPO_DESCRIPTION}\"" >> ${REPOS_LIST} &&
	echo -e "[$VERT OK $RESET]"
	echo -ne "Mise à jour des informations dans repos-archive.list :\t" &&
    sed -i /^Name=\"${REPO_NAME}\",Host=\".*\",Dist=\"${REPO_DIST//\//\\/}\",Section=\"${REPO_SECTION}\",Date=\"${REPO_DATE}\"/d ${REPOS_ARCHIVE_LIST} &&
	echo -e "[$VERT OK $RESET]"
# Sinon si la version remplacée n'est plus utilisée pour quelconque environnement, alors on l'archive
else
	# On récupère des informations supplémentaires sur la section qui va être remplacée
	REPO_ACTUAL_HOST=$(egrep "^Name=\"${REPO_NAME}\",Host=\".*\",Dist=\"${REPO_DIST}\",Section=\"${REPO_SECTION}\",Env=\"${DEFAULT_ENV}\"" "${REPOS_LIST}" | awk -F ',' '{print $2}' | cut -d'=' -f2 | sed 's/"//g')
	REPO_ACTUAL_DESCRIPTION=$(egrep "^Name=\"${REPO_NAME}\",Host=\".*\",Dist=\"${REPO_DIST}\",Section=\"${REPO_SECTION}\",Env=\"${DEFAULT_ENV}\",Date=\"${REPO_ACTUAL_DATE}\"" "${REPOS_LIST}" | awk -F ',' '{print $7}' | cut -d'=' -f2 | sed 's/"//g')

	echo -ne "Archivage du miroir de la section ${CYAN}${REPO_SECTION}${RESET} en date du ${CYAN}${REPO_DATE}${RESET} car il n'est plus utilisé par quelconque environnement :"
	mv "${REPO_ACTUAL_DATE}_${REPO_SECTION}"/ "archived_${REPO_ACTUAL_DATE}_${REPO_SECTION}" &&
	echo -e "[$VERT OK $RESET]"

	echo -ne "Mise à jour des informations dans repos.list :\t"
	sed -i /^Name=\"${REPO_NAME}\",Host=\".*\",Dist=\"${REPO_DIST//\//\\/}\",Section=\"${REPO_SECTION}\",Env=\"${DEFAULT_ENV}\",Date=\"${REPO_ACTUAL_DATE}\"/d ${REPOS_LIST} &&
	echo "Name=\"${REPO_NAME}\",Host=\"${REPO_HOST}\",Dist=\"${REPO_DIST}\",Section=\"${REPO_SECTION}\",Env=\"${DEFAULT_ENV}\",Date=\"${REPO_DATE}\",Description=\"${REPO_DESCRIPTION}\"" >> ${REPOS_LIST} &&
	echo -e "[$VERT OK $RESET]"

	echo -ne "Mise à jour des informations dans repos-archive.list :\t"
	# Supprime la section qu'on a restauré :
	sed -i /^Name=\"${REPO_NAME}\",Host=\"${REPO_HOST}\",Dist=\"${REPO_DIST//\//\\/}\",Section=\"${REPO_SECTION}\",Date=\"${REPO_DATE}\"/d ${REPOS_ARCHIVE_LIST} &&
	# Ajoute la section qui s'est faite remplacer :
	echo "Name=\"${REPO_NAME}\"Host=\"${REPO_ACTUAL_HOST}\",Dist=\"${REPO_DIST}\",Section=\"${REPO_SECTION}\",Date=\"${REPO_ACTUAL_DATE}\",Description:=\"${REPO_ACTUAL_DESCRIPTION}\"" >> ${REPOS_ARCHIVE_LIST} &&
	echo -e "[$VERT OK $RESET]"
fi

echo -e "${VERT}Opération terminée${RESET}"