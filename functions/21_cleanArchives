#!/bin/bash

# On va utiliser des fichiers temporaires pour traiter 
REPOS_DELETED="/tmp/repomanager_reposdeleted.tmp"
PARSE_FILE="/tmp/repomanager_parsefile.tmp"
echo -n> $REPOS_DELETED
echo -n> $PARSE_FILE

# Si ALLOW_AUTODELETE_ARCHIVED_REPOS != yes alors on quitte la fonction
if [ "$ALLOW_AUTODELETE_ARCHIVED_REPOS" != "yes" ];then
    echo -e "[$JAUNE ERREUR $RESET] La suppression automatique des repos archivés n'est pas autorisée"
    return 1
fi

# Si le paramètre retention est vide, alors on quitte la fonction
if [ -z "$RETENTION" ];then
    echo -e "[$JAUNE ERREUR $RESET] Le paramètre de retention est vide."
	return 1
fi


## Traitement ##
# Cas Redhat
if [ "$OS_FAMILY" == "Redhat" ];then
    # On récupère la liste de tous les repos archivés dans le fichier (on récupère le champ Name uniquement)
    REPOS_ARCHIVED=$(cat $REPOS_ARCHIVE_LIST | awk -F',' '{print $1}' | cut -d'=' -f2 | sed 's/"//g' | sort -u)

    # Avec cette liste, on va traiter chaque repo individuellement, en les triant par date puis en supprimant les plus vieux (on conserve X copie du repo, X étant défini par $RETENTION)
    for REPO_NAME in $(echo "$REPOS_ARCHIVED");do
        # On mets dans un fichier toutes les dates trouvées pour ce repo, et on les trie du + vieux au + recent. Puis on supprime les 2 dates les plus récentes (avec le head)
        grep "^Name=\"${REPO_NAME}\"" $REPOS_ARCHIVE_LIST | awk -F',' '{print $3}' | cut -d'=' -f2 | sed 's/"//g' | sort -t- -k3 -k2 -k1 | head -n -${RETENTION} > $PARSE_FILE

        # Si le fichier n'est pas vide on traite (il pourrait être vide si le nb de vieux repos est inférieur à $RETENTION)
        if [ -s "$PARSE_FILE" ];then
            echo -e "\nNettoyage automatique des anciens repos archivés"
            echo "Retention paramétrée : $RETENTION"
            for REPO_DATE in $(cat $PARSE_FILE);do
                echo " - Suppression du repo archivé $REPO_NAME en date du $REPO_DATE"
                #rm ${REPOS_DIR}/archived_${REPO_DATE}_${REPO_NAME} -rf
                #grep "^$REPO_NAME:$REPO_DATE" $REPOS_ARCHIVE_LIST >> $REPOS_DELETED
                # On retire le repo supprimé de $REPOS_ARCHIVE_LIST
                #sed -i /^Name=\"${REPO_NAME}\",Realname=\".*\",Date=\"${REPO_DATE}\"/d $REPOS_ARCHIVE_LIST
                # On mets dans une variable les noms de repos qui ont été supprimés
                MSG_DELETE_ARCHIVED_REPOS_AUTO="$MSG_DELETE_ARCHIVED_REPOS_AUTO\n$REPO_NAME en date du $REPO_DATE"
            done
        fi
    done
fi

# Cas Debian
if [ "$OS_FAMILY" == "Debian" ];then
    # On récupère la liste de tous les repos archivés dans le fichier (on récupère le champ Name uniquement)
    REPOS_ARCHIVED=$(cat $REPOS_ARCHIVE_LIST | awk -F',' '{print $1}' | cut -d'=' -f2 | sed 's/"//g' | sort -u)

    # Avec cette liste, on va traiter chaque repo individuellement, en les triant par date puis en supprimant les plus vieux (on conserve X copie du repo, X étant défini par $RETENTION)
    for REPO_NAME in $(echo "$REPOS_ARCHIVED");do
        # On mets dans un fichier toutes les dates trouvées pour ce repo, et on les trie du + vieux au + recent. Puis on supprime les 2 dates les plus récentes (avec le head)
        grep "^Name=\"${REPO_NAME}\"" $REPOS_ARCHIVE_LIST | awk -F',' '{print $5}' | cut -d'=' -f2 | sed 's/"//g' | sort -t- -k3 -k2 -k1 | head -n -${RETENTION} > $PARSE_FILE

        # Si le fichier n'est pas vide on traite (il pourrait être vide si le nb de vieux repos est inférieur à $RETENTION)
        if [ -s "$PARSE_FILE" ];then
            echo -e "\nNettoyage automatique des anciennes sections de repos archivées"
            echo "Retention paramétrée : $RETENTION"
            for REPO_DATE in $(cat $PARSE_FILE);do
                echo " - Suppression de la section archivée $REPO_NAME en date du $REPO_DATE"

                #rm ${REPOS_DIR}/archived_${REPO_DATE}_${REPO_NAME} -rf
                grep "^$REPO_NAME:$REPO_DATE" $REPOS_ARCHIVE_LIST >> $REPOS_DELETED
                #sed -i /^$REPO_NAME:$REPO_DATE/d $REPOS_ARCHIVE_LIST
                MSG_DELETE_ARCHIVED_REPOS_AUTO="$MSG_DELETE_ARCHIVED_REPOS_AUTO\n$REPO_NAME du $REPO_DATE" # On mets dans une variable les noms de repos qui ont été nettoyés
            done
        fi
    done
fi