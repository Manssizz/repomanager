#!/bin/bash

# La fonction a besoin de 6 paramètres pour fonctionner
# Le nom du repo 
# Le nom de la distribution
# Le nom de la section
# L'env de la section
# Le nouveau nom du repo
# La description (peut être vide)

# Affichage des arguments passés si le mode debug est activé :
if [ "$DEBUG_MODE" == "enabled" ];then echo "Arguments : $@";fi

while [ $# -ge 1 ];do case "$1" in
	--repo-name)
		REPO_NAME="$2"
		shift
	;;
	--repo-dist)
		REPO_DIST="$2"
		shift
	;;
	--repo-section)
		REPO_SECTION="$2"
		shift
	;;
	--repo-env)
		REPO_ENV="$2"
		shift
	;;
	--repo-new-name)
		REPO_NEW_NAME="$2"
		shift
	;;
	--repo-description)
		# on shift un coup pour récupérer tous les derniers arguments $* (la description pouvant contenir des espaces, chaque espace est un nouvel argument, c'est pour ça qu'on récupère tout)
		shift
		REPO_DESCRIPTION="$*"
	;;
	*)
	esac
	shift
done
if [ "$REPO_DESCRIPTION" == "nodescription" ];then REPO_DESCRIPTION="";fi # Si la description est égale à 'nodescription' alors elle doit être laissée vide

# On vérifie que le repo source (celui qui sera copié) existe bien :
if ! grep -q "^Name=\"${REPO_NAME}\",Host=\".*\",Dist=\"${REPO_DIST}\",Section=\"${REPO_SECTION}\",Env=\"${REPO_ENV}\"" "$REPOS_LIST";then
	echo -e "Il n'existe aucune section ${REPO_SECTION} (distribution ${REPO_DIST}) du repo ${REPO_NAME}"
	clean_exit
fi
# On vérifie qu'un repo du même nom n'existe pas déjà à l'env par défaut $DEFAULT_ENV (car la copie crée forcément une nouvelle section à l'env par défaut)
if grep -q "^Name=\"${REPO_NEW_NAME}\",Host=\".*\",Dist=\"${REPO_DIST}\",Section=\"${REPO_SECTION}\",Env=\"${DEFAULT_ENV}\"" "$REPOS_LIST";then
	echo -e "[${ROUGE} ERREUR ${RESET}] Le repo ${CYAN}${REPO_NEW_NAME}${RESET} avec la section ${CYAN}${REPO_SECTION}${RESET} (env ${CYAN}${DEFAULT_ENV}${RESET}) existe déjà..."
	clean_exit
fi

####

# On récupère la date et le host du repo qu'on va dupliquer :
REPO_DATE=$(egrep "^Name=\"${REPO_NAME}\",Host=\".*\",Dist=\"${REPO_DIST}\",Section=\"${REPO_SECTION}\",Env=\"${REPO_ENV}\"" "$REPOS_LIST" | awk -F ',' '{print $6}' | cut -d'=' -f2 | sed 's/"//g')
REPO_HOST=$(egrep "^Name=\"${REPO_NAME}\",Host=\".*\",Dist=\"${REPO_DIST}\",Section=\"${REPO_SECTION}\",Env=\"${REPO_ENV}\"" "$REPOS_LIST" | awk -F ',' '{print $2}' | cut -d'=' -f2 | sed 's/"//g')

echo -e "\nDébut de l'opération"
sleep 2

####

# Création du nouveau répertoire avec le nouveau nom du repo
echo -ne "\nCréation du nouveau repo : "
cd ${REPOS_DIR}/ &&
mkdir -p "${REPO_NEW_NAME}/${REPO_DIST}/"
if [ $? -eq "0" ];then
	echo -e "[${VERT} OK ${RESET}]"
else
	echo -e "[${ROUGE} ERREUR ${RESET}] Problème lors de la création du répertoire ${REPOS_DIR}/${REPO_NEW_NAME}/${REPO_DIST}"
	clean_exit
fi

####

# On copie la section à l'intérieur du repo actuel vers le répertoire du nouveau repo créé précédemment
echo -ne "\nCopie de la section : "
cp -r "${REPO_NAME}/${REPO_DIST}/${REPO_DATE}_${REPO_SECTION}" ${REPO_NEW_NAME}/${REPO_DIST}/
if [ $? -eq "0" ];then
	echo -e "[${VERT} OK ${RESET}]"
else
	echo -e "[${ROUGE} ERREUR ${RESET}] Problème lors de la copie de la section"
	clean_exit
fi

####

echo -ne "Création du lien symbolique :\t"
cd ${REPOS_DIR}/${REPO_NEW_NAME}/${REPO_DIST}/ &&
ln -s "${REPO_DATE}_${REPO_SECTION}/" "${REPO_SECTION}_${DEFAULT_ENV}" # La section dupliquée est forcément créée à l'env par défaut $DEFAULT_ENV (pour respecter la chaine de tests)
if [ $? -eq "0" ];then
	echo -e "[${VERT} OK ${RESET}]"
else
	echo -e "[${ROUGE} ERREUR ${RESET}] Problème lors de la création du lien symbolique"
	clean_exit
fi

####

echo -ne "Mise à jour des informations dans repos.list :\t"
echo "Name=\"${REPO_NEW_NAME}\",Host=\"${REPO_HOST}\",Dist=\"${REPO_DIST}\",Section=\"${REPO_SECTION}\",Env=\"${DEFAULT_ENV}\",Date=\"${REPO_DATE}\",Description=\"${REPO_DESCRIPTION}\"" >> "$REPOS_LIST" &&
if [ $? -eq "0" ];then
	echo -e "[${VERT} OK ${RESET}]"
else
	echo -e "[${ROUGE} ERREUR ${RESET}] pendant l'ajout des informations"
	clean_exit
fi

####

echo -ne "Application des droits sur le nouveau repo créé :\t"
find ${REPOS_DIR}/${REPO_NEW_NAME}/ -type f -exec chmod 0660 {} \;
find ${REPOS_DIR}/${REPO_NEW_NAME}/ -type d -exec chmod 0770 {} \;
chown -R ${WWW_USER}:repomanager ${REPOS_DIR}/${REPO_NEW_NAME}/
echo -e "[${VERT} OK ${RESET}]"

# Génération du fichier de conf repo en local (ces fichiers sont utilisés pour les profils)
generateConf --repo-name ${REPO_NEW_NAME} --repo-dist ${REPO_DIST} --repo-section ${REPO_SECTION}

echo -e "${VERT}Opération terminée${RESET}"